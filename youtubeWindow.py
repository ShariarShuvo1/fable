# Form implementation generated from reading ui file 'youtubeWindow.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import pytube
from pytube import YouTube
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import QPixmap
import requests
import shutil
from sys import path as pylib
import os
pylib += [os.path.abspath(r'/pytube')]


class myThread(QtCore.QThread):
    pogress_value = QtCore.pyqtSignal(int)

    def setter(self, video: pytube.Stream):
        self.video = video

    def run(self):
        self.video_adress = self.video.download(output_path='./')


class ResObject:
    def __init__(self, id, typ, resu, size, fps='Audio'):
        self.id = id
        self.typ = typ
        self.resu = resu
        self.fps = fps
        self.size = size

    def __str__(self):
        if self.fps != 'Audio':
            fps_txt = f'{self.fps}fps'
            mb_txt = f'{self.size}MB'
            s = f'{self.resu} - {mb_txt} - {self.typ} - {fps_txt}'
        else:
            s = f'{self.resu} - {self.size}MB - {self.typ}'
        return s


class Ui_youtubeDownloader(object):
    def setupUi(self, youtubeDownloader, mw):
        self.currentStatas = 'Paste a YouTube URL'
        self.haveValidVideo = False
        self.yd = youtubeDownloader
        self.mw = mw
        youtubeDownloader.setObjectName("youtubeDownloader")
        youtubeDownloader.resize(650, 520)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            youtubeDownloader.sizePolicy().hasHeightForWidth())
        youtubeDownloader.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(parent=youtubeDownloader)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 10, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Bauhaus 93")
        font.setPointSize(12)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.backClicked)
        self.lineEdit = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(10, 80, 331, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.lineEdit.setFont(font)
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        # line edit-----------------------------------------------------------------
        self.lineEdit.setClearButtonEnabled(True)
        self.lineEdit.textEdited.connect(self.onPaste)

        # line edit-----------------------------------------------------------------
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(350, 80, 281, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        # Combo Box-----------------------------------------------------------------
        self.comboBox.currentTextChanged.connect(self.comboClicked)
        self.comboBox.setDisabled(True)
        # Combo Box-----------------------------------------------------------------
        # Downaload Button-----------------------------------------------------------------
        self.download = QtWidgets.QPushButton(parent=self.centralwidget)
        self.download.setGeometry(QtCore.QRect(100, 350, 261, 51))
        font = QtGui.QFont()
        font.setFamily("Bauhaus 93")
        font.setPointSize(28)
        self.download.setFont(font)
        self.download.setObjectName("download")

        self.download.clicked.connect(self.downloadClicked)
        self.download.setDisabled(True)
        # Downaload Button-----------------------------------------------------------------
        # Cancel Button-----------------------------------------------------------------
        self.cancelButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.cancelButton.setGeometry(QtCore.QRect(381, 350, 161, 51))
        font = QtGui.QFont()
        font.setFamily("Bauhaus 93")
        font.setPointSize(28)
        self.cancelButton.setFont(font)
        self.cancelButton.setObjectName("cancelButton")

        self.cancelButton.clicked.connect(self.cancelClicked)
        self.cancelButton.setDisabled(True)

        # Cancel Button-----------------------------------------------------------------

        youtubeDownloader.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=youtubeDownloader)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 500, 22))
        self.menubar.setObjectName("menubar")
        youtubeDownloader.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=youtubeDownloader)
        self.statusbar.setObjectName("statusbar")
        youtubeDownloader.setStatusBar(self.statusbar)
        youtubeDownloader.setWindowIcon(QtGui.QIcon('./assets/logo.png'))

        self.thumbnail_frame = QtWidgets.QLabel(parent=self.centralwidget)
        self.thumbnail_frame.setGeometry(QtCore.QRect(10, 160, 250, 141))
        self.thumbnail_frame.setObjectName('thumbnail_frame')

        self.description_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.description_label.setGeometry(QtCore.QRect(270, 160, 250, 141))

        self.pogress = QtWidgets.QProgressBar(parent=self.centralwidget)
        self.pogress.setGeometry(QtCore.QRect(10, 450, 630, 20))
        self.pogress.setValue(0)
        self.pogress.hide()

        self.status_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.status_label.setGeometry(QtCore.QRect(10, 480, 630, 20))

        self.retranslateUi(youtubeDownloader)
        QtCore.QMetaObject.connectSlotsByName(youtubeDownloader)

    def retranslateUi(self, youtubeDownloader):
        _translate = QtCore.QCoreApplication.translate
        youtubeDownloader.setWindowTitle(_translate(
            "youtubeDownloader", "YouTube Video Downloader"))
        self.pushButton_2.setText(_translate("youtubeDownloader", "<- BACK"))
        self.lineEdit.setPlaceholderText(_translate(
            "youtubeDownloader", "Insert YouTube URL"))
        self.comboBox.setPlaceholderText(_translate(
            "youtubeDownloader", "Select Resolution"))
        self.download.setText(_translate("youtubeDownloader", "Download"))
        self.cancelButton.setText(_translate("youtubeDownloader", "Cancel"))
        self.status_label.setText(self.currentStatas)

    def backClicked(self):
        self.mw.show()
        self.yd.hide()

    def showThumbnail(self):
        pixmap = QPixmap('./thumbnail.jpg')
        pixmap = pixmap.scaled(250, 141)
        self.thumbnail_frame.setPixmap(pixmap)

    def onPaste(self):
        url = self.lineEdit.text()
        self.haveValidVideo = False
        self.pogress.hide()
        self.pogressValueChanging(0)
        self.pogress.setStyleSheet(
            "QProgressBar::chunk ""{""background-color: #0095ff;""}")
        self.comboBox.clear()
        self.comboBox.setDisabled(True)
        try:
            video = YouTube(url, on_progress_callback=self.progress_func,
                            on_complete_callback=self.complete_func)
            self.streams_list = video
            self.haveValidVideo = True
            self.comboBox.setDisabled(False)
            self.dropDownDesign(video)
            time = video.length
            duration_hour = time//3600
            duration_minute = (time-(duration_hour*3600))//60
            duration_second = time - \
                (duration_hour*3600) - (duration_minute*60)
            if duration_hour != 0:
                time = f'{duration_hour}:{duration_minute}:{duration_second}'
            elif duration_minute != 0:
                time = f'{duration_minute}:{duration_second}'
            else:
                time = f'{duration_second} Second'

            s = f'Title: {video.title}\nChannel: {video.author}\nViews: {video.views}\nDuration: {time}'
            self.description_label.setText(s)

            thumbnail_url = video.thumbnail_url
            res = requests.get(thumbnail_url, stream=True)
            f = open('thumbnail.jpg', 'wb')
            shutil.copyfileobj(res.raw, f)
            f.close()
            self.showThumbnail()
            self.status_label_update('Choose Resulation')

        except:
            self.status_label_update(
                'The URL is invalid or the video is PRIVATE/AGE-RESTRICTED')
            self.haveValidVideo = False
            print('Invalid URL')
            self.thumbnail_frame.clear()
            self.description_label.clear()
            self.comboBox.clear()
            self.pogress.setValue(0)

    def dropDownDesign(self, video: YouTube):
        if self.haveValidVideo:
            self.res = video.streams.all()
            self.resulation = dict()
            for i, r in enumerate(self.res):
                if r.type == 'video':
                    obj = ResObject(r.itag, r.mime_type,
                                    r.resolution, r.filesize_mb, r.fps)
                else:
                    obj = ResObject(r.itag, r.mime_type, r.abr, r.filesize_mb)
                self.resulation[i] = obj
            for val in self.resulation.values():
                self.comboBox.addItem(str(val))
                self.status_label_update(f'{val} added to List!')

    def cancelClicked(self):
        self.pogress.hide()
        self.pogress.setValue(0)
        self.status_label_update('Download Cancelled!')
        self.thread.terminate()
        self.filePath.close()
        os.remove(self.fileAdressPath)
        self.lineEdit.setDisabled(False)
        self.comboBox.setDisabled(False)
        self.download.setDisabled(False)
        self.cancelButton.setDisabled(True)

    def comboClicked(self):
        if self.haveValidVideo:
            self.pogressValueChanging(0)
            self.pogress.setStyleSheet(
                "QProgressBar::chunk ""{""background-color: #0095ff;""}")
            self.download.setDisabled(False)
            self.status_label_update('Initiate Download')
            idx = self.comboBox.currentIndex()
            self.tag = self.resulation[idx].id

    def downloadClicked(self):
        if self.haveValidVideo:
            for ele in self.res:
                if ele.itag == self.tag:
                    self.final = ele
                    break
            self.pogress.show()
            self.fileAdressPath = self.final.get_file_path().split('\\')[-1]
            self.thread = myThread()
            self.thread.pogress_value.connect(self.pogressValueChanging)
            if self.final.type == 'video' and self.final.is_progressive:
                self.thread.setter(self.final)
                self.thread.start()
                print('hey')
                # self.thread.setter(self.streams_list.filter(
                #     file_extension="mp3").first())
                # self.thread.start()
            else:
                self.thread.setter(self.final)
                self.thread.start()

            self.lineEdit.setDisabled(True)
            self.comboBox.setDisabled(True)
            self.download.setDisabled(True)
            self.cancelButton.setDisabled(False)
            self.status_label_update('Downloading...')

    def progress_func(self, video, chunk, left):
        self.filePath = chunk
        l = self.final.filesize-left
        value = int((l/self.final.filesize)*100)
        self.thread.pogress_value.emit(value)

    def pogressValueChanging(self, val):
        self.pogress.setValue(val)

    def complete_func(self, a, b):
        self.pogressValueChanging(100)
        self.pogress.setStyleSheet(
            "QProgressBar::chunk ""{""background-color: #2bff00;""}")
        self.status_label_update('Download Complete')
        self.lineEdit.setDisabled(False)
        self.comboBox.setDisabled(False)
        self.cancelButton.setDisabled(True)

    def status_label_update(self, txt='Paste a YouTube URL'):
        self.status_label.setText(txt)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    youtubeDownloader = QtWidgets.QMainWindow()
    ui = Ui_youtubeDownloader()
    ui.setupUi(youtubeDownloader, 'Dummy')
    youtubeDownloader.show()
    sys.exit(app.exec())
